import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor, exceptions
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.utils.exceptions import BotBlocked
from low_level.auth import *
from low_level.parser import *
from resources.models import *
from resources.states import *

term_begin = 1

def week_denominator_calculate(weeknum: int):
    if term_begin == 0:
        if weeknum % 2 != 0:
            return 1
        else:
            return 0
    elif term_begin == 1:
        if weeknum % 2 != 0:
            return 0
        else:
            return 1

def both_week_calculate(current_denominator):
    if current_denominator == 0:
        return (0,1)
    elif current_denominator == 1:
        return (0,)            

async def eduhouse_check():
    files = download_docs()
    db_files = session.query(ParsedFiles).all()
    for filecheck in db_files:
        if filecheck.filename not in files:
            session.delete(filecheck)
    for file in files:
        if not session.query(ParsedFiles).filter(ParsedFiles.filename == file).first():
            new_file = ParsedFiles(filename=file)
            session.add(new_file)
            substitutions = parse(file)
            for sub in substitutions:
                group = session.query(Group).filter(Group.group_name == sub.group).first()
                if not group:
                    group = Group(group_name=sub.group)
                    session.add(group)
                sub_db = Substitution(file=new_file, pair_num=sub.pair_num, init_pair=sub.init_pair,
                                      sub_pair=sub.sub_pair, cab=sub.cab, group=group)
                session.add(sub_db)
                session.commit()
            remove_cache()
        else:
            substitutions = parse(file)
            db_file = session.query(ParsedFiles).filter(ParsedFiles.filename == file).first()
            for substitution in substitutions:
                group = session.query(Group).filter(Group.group_name == substitution.group).first()
                if not group:
                    group = Group(group_name = substitution.group)
                    session.add(group)
                    session.commit()
                substitution_check = session.query(Substitution).filter(Substitution.pair_num == substitution.pair_num, Substitution.group == group, Substitution.sub_pair == substitution.sub_pair).first()
                if substitution_check is None:
                    sub_db = Substitution(file=db_file, pair_num=substitution.pair_num, init_pair=substitution.init_pair, sub_pair=substitution.sub_pair, cab=substitution.cab, group=group)
                    session.add(sub_db)
                    session.commit()
                else:
                    continue
            remove_cache()
    session.commit()


async def notification(user: Auth):
    if not user.notification:
        return
    if len(user.group.subs) == 0:
        try:
            await bot.send_message(user.user_id, "–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ–Ω")
        except BotBlocked:
            return
    else:
        await bot.send_message(user.user_id,
                               "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ–Ω\n"
                               "–î–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–º–µ–Ω—ã: ")
    try:
        skip_counter = 0
        for substitution in user.group.subs:
            date = substitution.file.filename[0:10]
            formated_date = date.replace(".", "/")
            filter_date = datetime.datetime.strptime(formated_date, '%d/%m/%Y').date()
            current_date = datetime.datetime.today().date()
            if filter_date < current_date:
                skip_counter += 1
                continue
            elif filter_date >= current_date:
                await bot.send_message(user.user_id,
                                       f"üìå –ó–∞–º–µ—â–µ–Ω–∏–µ –Ω–∞ {date}:\nüî¢ –ù–æ–º–µ—Ä –ø–∞—Ä—ã: {substitution.pair_num}\n"
                                       f"üìñ –ü—Ä–µ–¥–º–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {substitution.init_pair}\nüìù "
                                       f"–ó–∞–º–µ–Ω–∞: {substitution.sub_pair}\nüö™ "
                                       f"–ö–∞–±–∏–Ω–µ—Ç: {substitution.cab}")
        if skip_counter > 0:
            await bot.send_message(user.user_id, f"–ü—Ä–æ–ø—É—â–µ–Ω–æ {skip_counter} –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ–Ω")
    except BotBlocked:
        return


bot = Bot(token=os.environ["BOT_TOKEN"], parse_mode='html')
storage = RedisStorage2("localhost", 6379, pool_size=40, prefix="interesting_fsm_key")
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()


@dp.message_handler(commands=["start", "begin"], state="*")
async def start(message: types.Message):
    auth = session.query(Auth).filter(Auth.user_id == message.from_user.id).first()
    if auth:
        await UserState.user_authorized.set()
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç! üëã\n–¢—ã —Ä–∞–Ω–µ–µ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞–ª—Å—è –≤ –≥—Ä—É–ø–ø–µ {auth.group.group_name}\n"
            f"–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /change_group\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help\n"
            f"(–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª –∏ –≤—ã–ø—É—Å—Ç–∏–ª - –ö–∞—Ä–∞–≤–∞–π—á–∏–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä)")
    else:
        await UserState.user_default_state.set()
        await message.answer(
            text="–ü—Ä–∏–≤–µ—Ç! üëã\n–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
                 "–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <i>/auth</i>\n"
                 "(–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª –∏ –≤—ã–ø—É—Å—Ç–∏–ª - –ö–∞—Ä–∞–≤–∞–π—á–∏–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä)")


@dp.message_handler(commands=["auth"], state=UserState.user_default_state)
async def ask_group(message: types.Message):
    await UserState.user_group_required.set()
    await message.answer(
        "‚úèÔ∏è –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç–µ–±—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å, –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ç—ã —É—á–∏—à—å—Å—è. "
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 9–ü–û-21. "
        "–ï—Å–ª–∏ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –∑–Ω–∞—á–∏—Ç –¥–ª—è –Ω–µ–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–º–µ—â–µ–Ω–∏–π. "
        "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è, —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É.")


@dp.message_handler(state=UserState.user_group_required)
async def authorization(message: types.Message):
    try_group = session.query(Group).filter(Group.group_name == message.text).first()
    if try_group is None:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! "
            "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∑–Ω–∞—á–∏—Ç —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã "
            "–µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ")
        return
    new_auth = Auth(user_id=message.from_user.id, group_id=try_group.id)
    session.add(new_auth)
    session.commit()
    scheduler.add_job(notification, "cron", hour=new_auth.hour, minute=new_auth.minute,
                      id=new_auth.user_id, args=(new_auth,))
    await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –≥—Ä—É–ø–ø–µ {try_group.group_name}")
    await UserState.user_authorized.set()


@dp.message_handler(commands=["change_group"], state=UserState.user_authorized)
async def ask_group_change(message: types.Message):
    await UserState.user_changing_group.set()
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")


@dp.message_handler(state=UserState.user_changing_group)
async def group_change(message: types.Message):
    try_group = session.query(Group).filter(Group.group_name == message.text).first()
    if try_group is None:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è, "
            "–µ—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∑–Ω–∞—á–∏—Ç —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ")
        return
    user_to_change = session.query(Auth).filter(Auth.user_id == message.from_user.id).first()
    user_to_change.group = try_group
    session.add(user_to_change)
    session.commit()
    await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –≥—Ä—É–ø–ø–µ {try_group.group_name}")
    await UserState.user_authorized.set()


@dp.message_handler(commands=["substitutions"], state=UserState.user_authorized)
async def get_substitutions(message: types.Message):
    auth = session.query(Auth).filter(Auth.user_id == message.from_user.id).first()
    substitutions = session.query(Substitution).filter(Substitution.group == auth.group).all()
    subs_counter = 0
    if not substitutions:
        await message.answer("‚≠ïÔ∏è –ó–∞–º–µ—â–µ–Ω–∏–π –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        for substitution in substitutions:
            date = substitution.file.filename[0:10]
            formated_date = date.replace(".", "/")
            filter_date = datetime.datetime.strptime(formated_date, '%d/%m/%Y').date()
            current_date = datetime.datetime.today().date()
            if filter_date < current_date:
                subs_counter += 1
                continue
            elif filter_date >= current_date:
                await message.answer(
                    f"üìå –ó–∞–º–µ—â–µ–Ω–∏–µ –Ω–∞ {date}:\n"
                    f"üî¢ –ù–æ–º–µ—Ä –ø–∞—Ä—ã: {substitution.pair_num}\n"
                    f"üìñ –ü—Ä–µ–¥–º–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {substitution.init_pair}\n"
                    f"üìù –ó–∞–º–µ–Ω–∞: {substitution.sub_pair}\n"
                    f"üö™ –ö–∞–±–∏–Ω–µ—Ç: {substitution.cab}")
        if subs_counter == len(substitutions):
            await message.answer("‚≠ïÔ∏è –ó–∞–º–µ—â–µ–Ω–∏–π –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            await message.answer(f"–ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ–Ω: {subs_counter}")


@dp.message_handler(commands=["disable_notifications"], state=UserState.user_authorized)
@dp.message_handler(content_types=["text"], text="–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", state=UserState.user_authorized)
async def disable_notifications(message: types.Message):
    auth = session.query(Auth).filter(Auth.user_id == message.from_user.id).first()
    if not auth.notification:
        await message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())
        return
    auth.notification = False
    session.add(auth)
    session.commit()
    await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–º–µ–Ω–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=["enable_notifications"], state=UserState.user_authorized)
@dp.message_handler(content_types=["text"], text="–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", state=UserState.user_authorized)
async def enable_notifications(message: types.Message):
    auth = session.query(Auth).filter(Auth.user_id == message.from_user.id).first()
    if auth.notification:
        await message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())
        return
    auth.notification = True
    session.add(auth)
    session.commit()
    await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–º–µ–Ω–∞—Ö —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=["help"], state=[UserState.user_default_state, UserState.user_authorized])
async def help(message: types.Message):
    await message.answer(
        "üìú –°–ø—Ä–∞–≤–∫–∞: –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É–∑–Ω–∞–≤–∞—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞–ø–∏—Å–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ"
        "\n–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Å—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã 9–ü–û-21 –ö–∞—Ä–∞–≤–∞–π—á–∏–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä\n"
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "<i>/start</i> - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "<i>/help</i> - –°–ø—Ä–∞–≤–∫–∞\n"
        "<i>/auth</i> - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
        "<i>/change_group</i> - –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã\n"
        "<i>/substitutions</i> - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ–Ω –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã\n"
        "<i>/disable_notifications</i> - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "<i>/enable_notifications</i> - –í–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "<i>/timetable_today</i> - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "<i>/timetable_tomorrow</i> - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
    )


@dp.errors_handler(exception=exceptions.RetryAfter)
async def retry_after_handler(update: types.Update, exception: exceptions.RetryAfter):
    if update.message is not None:
        await bot.send_message(update.message.from_user.id,
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {exception.timeout}")

    return True


@dp.message_handler(commands=["config_time"], state=UserState.user_authorized)
@dp.message_handler(content_types=["text"], text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", state=UserState.user_authorized)
async def config_time(message: types.Message, state: FSMContext):
    cancel = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True).add(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    await message.answer("–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —á–∞—Å (–æ—Ç 0 –¥–æ 23)",
                         reply_markup=cancel)
    await UserState.user_setting_hour.set()


@dp.message_handler(content_types=["text"], text="–û—Ç–º–µ–Ω–∞",
                    state=[UserState.user_setting_hour, UserState.user_setting_minute])
async def cancellation(message: types.Message):
    await UserState.user_authorized.set()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=UserState.user_setting_hour)
async def hour_input(message: types.Message, state: FSMContext):
    try:
        hour = int(message.text)
    except ValueError:
        await message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return
    else:
        if hour < 0 or hour > 23:
            await message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
            return
        await UserState.user_setting_minute.set()
        await state.update_data(hour=hour)
        await message.answer("–•–æ—Ä–æ—à–æ, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –º–∏–Ω—É—Ç—É (–æ—Ç 0 –¥–æ 59)")


@dp.message_handler(state=UserState.user_setting_minute)
async def time_set(message: types.Message, state: FSMContext):
    try:
        minute = int(message.text)
    except ValueError:
        await message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
    else:
        if minute < 0 or minute > 59:
            await message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
            return
        fsm_data = await state.get_data()
        hour = fsm_data.get("hour")
        auth = session.query(Auth).filter(Auth.user_id == message.from_user.id).first()
        auth.hour = hour
        auth.minute = minute
        auth.notification = True
        scheduler.remove_job(auth.user_id)
        scheduler.add_job(notification, "cron", hour=hour, minute=minute, id=auth.user_id, args=(auth,))
        session.add(auth)
        session.commit()
        await UserState.user_authorized.set()
        await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ –∑–∞–º–µ–Ω–∞—Ö –≤ {hour}:{minute:02}",
                             reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=["settings"], state=UserState.user_authorized)
async def settings(message: types.Message):
    settings_menu = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    auth_data = session.query(Auth).filter(Auth.user_id == message.from_user.id).first()
    if auth_data.notification is False:
        enable_notifications_button = types.KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        settings_menu.add(enable_notifications_button)
    else:
        disable_notifications_button = types.KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        settings_menu.add(disable_notifications_button)

    notification_config_button = types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
    settings_menu.add(notification_config_button)

    await message.answer("–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫: \n", reply_markup=settings_menu)

@dp.message_handler(commands = ["timetable_today"], state = UserState.user_authorized)
async def timetable_today(message: types.Message):
    now = datetime.datetime.now()
    current_denominator = week_denominator_calculate(now.isocalendar().week)
    auth = session.query(Auth).filter(Auth.user_id==message.from_user.id).first()
    timetable = session.query(Timetable).filter(Timetable.group_id==auth.group_id, Timetable.week_day_num==now.weekday()).all()
    if timetable is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! –í–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        return
    subs = session.query(Substitution).filter(Substitution.group==auth.group).all()
    current_date = f"{now.day}.{now.month:02}.{now.year}"
    result_text = f"üìÖ –¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {current_date}\n"

    for lesson_check in timetable:
        if lesson_check.denominator == 2 or lesson_check.denominator == current_denominator:
            continue
        else:
            timetable.remove(lesson_check)

    if len(subs) == 0:
        for lesson in timetable:
            if lesson.pair_name == "-":
                continue
            else:
                result_text += f"üïí {lesson.pair_num} –ø–∞—Ä–∞:\nüìñ –ü—Ä–µ–¥–º–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {lesson.pair_name}\nüö™ –ö–∞–±–∏–Ω–µ—Ç: {lesson.cab}\n\n"
    else:
        for lesson in timetable:
            for substitution in subs:
                if substitution.pair_num == lesson.pair_num and substitution.file.filename[0:10] == current_date:
                    result_text += f"üïí {substitution.pair_num} –ø–∞—Ä–∞:\nüìñ –ü—Ä–µ–¥–º–µ—Ç –ø–æ –∑–∞–º–µ—â–µ–Ω–∏—é: {substitution.sub_pair}\nüö™ –ö–∞–±–∏–Ω–µ—Ç: {substitution.cab}\n\n"
                    break
                else:
                    if lesson.pair_name == "-":
                        continue
                    else:
                        result_text += f"üïí {lesson.pair_num} –ø–∞—Ä–∞:\nüìñ –ü—Ä–µ–¥–º–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {lesson.pair_name}\nüö™ –ö–∞–±–∏–Ω–µ—Ç: {lesson.cab}\n\n"
                    break
                
    await message.answer(result_text)

@dp.message_handler(commands=["timetable_tomorrow"], state=UserState.user_authorized)
async def timetable_tomorrow(message: types.Message):
    tomorrow = datetime.datetime.today() + datetime.timedelta(days=1)
    current_denominator = week_denominator_calculate(tomorrow.isocalendar().week)
    auth = session.query(Auth).filter(Auth.user_id==message.from_user.id).first()
    timetable = session.query(Timetable).filter(Timetable.group_id==auth.group_id, Timetable.week_day_num==tomorrow.weekday()).all()
    if timetable is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! –í–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        return
    subs = session.query(Substitution).filter(Substitution.group==auth.group).all()
    current_date = f"{tomorrow.day}.{tomorrow.month:02}.{tomorrow.year}"
    result_text = f"üìÖ –¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {current_date}\n"
    for filter_lesson in timetable:
        if filter_lesson.denominator == 2 or filter_lesson.denominator == current_denominator:
            continue
        else:
            timetable.remove(filter_lesson)
    
    if len(subs) == 0:
        for lesson in timetable:
            if lesson.pair_name == "-":
                continue
            else:
                result_text += f"üïí {lesson.pair_num} –ø–∞—Ä–∞:\nüìñ –ü—Ä–µ–¥–º–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {lesson.pair_name}\nüö™ –ö–∞–±–∏–Ω–µ—Ç: {lesson.cab}\n\n"
    else:
        for lesson in timetable:
            for substitution in subs:
                if substitution.pair_num == lesson.pair_num and substitution.file.filename[0:10] == current_date:
                    result_text += f"üïí {substitution.pair_num} –ø–∞—Ä–∞:\nüìñ –ü—Ä–µ–¥–º–µ—Ç –ø–æ –∑–∞–º–µ—â–µ–Ω–∏—é: {substitution.sub_pair}\nüö™ –ö–∞–±–∏–Ω–µ—Ç: {substitution.cab}\n\n"
                    break
                else:
                    if lesson.pair_name == "-":
                        continue
                    else:
                        result_text += f"üïí {lesson.pair_num} –ø–∞—Ä–∞:\nüìñ –ü—Ä–µ–¥–º–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {lesson.pair_name}\nüö™ –ö–∞–±–∏–Ω–µ—Ç: {lesson.cab}\n\n"
                    break

    await message.answer(result_text)

if __name__ == "__main__":
    scheduler.add_job(eduhouse_check, "interval", hours = 1)
    users = session.query(Auth).all()
    for user in users:
        scheduler.add_job(notification, "cron", hour=user.hour, minute=user.minute, id=user.user_id, args=(user,))
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
